//+------------------------------------------------------------------+
//|                                            maximas e minimas.mq5 |
//|                                                  Copyright 2020. |
//|                                             https://www.mql5.com |
//+------------------------------------------------------------------+
#property copyright "felipe paris Copyright 2020."
#property link      "https://www.mql5.com"
#property version   "1.00"
//---
enum _Enummedia
{
   _false       = 0,           // False
   _true       = 1           // True
};



sinput string s3; //---------------------------
input int num_lots                         = 100;           // Número de Lotes 
input ENUM_TIMEFRAMES mm_tempo_grafico     = PERIOD_CURRENT;// Tempo Gráfico
input int magic_number = 1238;   // Nº mágico do robô
//sinput string s1; //-----------Médias Móveis-------------//
int i=1;

int i2=1;

sinput string s2; //-----------condicoes de entrada da operacao-------------

input _Enummedia operar_no_fechamento = 0; // operar no fechamento do candle 
input string hora_limite_abre_op          = "16:28";      // hora abrir operacao 
input ENUM_APPLIED_PRICE ifr_preco         = PRICE_CLOSE;   // Preço Aplicado
input _Enummedia media_filtro_media = 0; // usar medias para so operar tendencia 

input int media_filtro2 = 9; // periodo da media rapida
input int media_filtro3 = 17; // periodo da media lenta 

sinput string s6; //-----------IFR-------------
input int ifr_periodo                      = 2;             // Período IFR
input int ifr_sobrecompra                  = 70;            // Nível de Sobrecompra
input int ifr_sobrevenda                   = 20;            // Nível de Sobrevenda

sinput string s8; //--------------------------- saida da operacao
input int deslocamento = 1; // deslocamento das medias maxima e minima 
input int MA_Period_max = 2;         //Periodo de média máxima


sinput string s4; //---------------------------
input _Enummedia operacoes_daytrade = 0; // operacoes daytrade  
input string hora_limite_fecha_op          = "16:26";       // Horário Limite Fechar Posição 

input _Enummedia encerrar_finaldodia = 0; // encerrar posições fim do dia 
input string hora_limite_encerra = "17:02";        // Horario limite para encerrar posições 

input string hora_limite_opera = "16:50"; // horario limite oeprar acoes nao pode se rmaior que 16:50 

//+------------------------------------------------------------------+
//|  Variáveis para os indicadores                                   |
//+------------------------------------------------------------------+


int MA_max_handle;                 // Handle para a média móvel máxima
int media_filtro2_handle;             // media tendencia 
int media_filtro3_handle;             // media tendencia 
double ma_max_Val[];               // Array dinâmico para conter a média móvel mínima 
double media_filtro2_val[];         // media tendencia 
double media_filtro3_val[];           // media tendencia 

//--- IFR
int ifr_Handle;           // Handle controlador para o IFR
double ifr_Buffer[];      // Buffer para armazenamento dos dados do IFR

  bool Comprar = false; // Pode comprar?
  bool encerrarcompras = false; 
   bool encerrarcompras_fimdia = false; 
    bool media_filtro_media_operacao = false; 



//+------------------------------------------------------------------+
//| Variáveis para as funçoes                                        |
//+------------------------------------------------------------------+



MqlRates rates[];            // Variável para armazenar rates
MqlTick tick;                // variável para armazenar ticks 


//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
  {


    
   //    Comment("Função OnInit iniciada");
   //--- Get the handle for Moving Average indicator
      MA_max_handle=iMA(_Symbol,mm_tempo_grafico,MA_Period_max,deslocamento,MODE_SMA,PRICE_HIGH);
    media_filtro2_handle = iMA(_Symbol,mm_tempo_grafico,media_filtro2,0,MODE_SMA,PRICE_CLOSE);
   media_filtro3_handle =iMA (_Symbol,mm_tempo_grafico,media_filtro3,0,MODE_SMA,PRICE_CLOSE);
   
     ifr_Handle = iRSI(_Symbol,mm_tempo_grafico,ifr_periodo,ifr_preco);
//--- What if handle returns Invalid Handle
    if(MA_max_handle < 0 || media_filtro2_handle < 0 || media_filtro3_handle < 0 || ifr_Handle < 0)
     {
      Alert("Error Creating Handles for indicators - error: ",GetLastError(),"!!");
     }
   
   // Para adicionar no gráfico o indicador:

    
   ChartIndicatorAdd(0,0,MA_max_handle);
      ChartIndicatorAdd(0,1,ifr_Handle);
   ChartIndicatorAdd(0,0,media_filtro2_handle);
   ChartIndicatorAdd(0,0,media_filtro3_handle);
   //---
  
//---
   return(INIT_SUCCEEDED);
  }
//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
  
 //  Comment("Função OnDeinit iniciada");

  IndicatorRelease(ifr_Handle);
       IndicatorRelease(MA_max_handle);
              IndicatorRelease(media_filtro2_handle);
         IndicatorRelease(media_filtro3_handle);
  }
//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
  {
  
 // Comment("Função Ontick iniciada");
    
//---
    // Copiar um vetor de dados tamanho três para o vetor mm_Buffer
    CopyBuffer(MA_max_handle,0,0,3,ma_max_Val);
       CopyBuffer(ifr_Handle,0,0,4,ifr_Buffer);
      CopyBuffer(media_filtro2_handle,0,0,3,media_filtro2_val);
     CopyBuffer(media_filtro3_handle,0,0,3,media_filtro3_val);
    
    //--- Alimentar Buffers das rates com dados:
    CopyRates(_Symbol,mm_tempo_grafico,0,6,rates);
    ArraySetAsSeries(rates,true);
       ArraySetAsSeries(ifr_Buffer,true);
    
    // Ordenar o vetor de dados:
    ArraySetAsSeries(ma_max_Val,true);
       ArraySetAsSeries(media_filtro2_val,true);
      ArraySetAsSeries(media_filtro3_val,true);
    //---
    
   ChartIndicatorAdd(0,0,MA_max_handle);
     ChartIndicatorAdd(0,0,media_filtro2_handle);
   ChartIndicatorAdd(0,0,media_filtro3_handle);
   
   int copied=CopyRates(_Symbol,mm_tempo_grafico,0,2,rates); // Copied all datas

     //--- Get the last price quote using the MQL5 MqlTick Structure
   if(!SymbolInfoTick(_Symbol,tick))
     {
      Alert("Error getting the latest price quote - error:",GetLastError(),"!!");
      return;
     }
     
   //--- Get the details of the latest 3 bars
   if(CopyRates(_Symbol,mm_tempo_grafico,0,8,rates)<0)
     {
      Alert("Error copying rates/history data - error:",GetLastError(),"!!");
      return;
     }
     
     
   //--- Copy the new values of our indicators to buffers (arrays) using the handle
   
   if(CopyBuffer(MA_max_handle,0,0,3,ma_max_Val)<0)
     {
      Alert("Error copying Max Moving Average indicator buffer - error:",GetLastError());
      return;
     }
     

     
          
        if(CopyBuffer(media_filtro2_handle,0,0,3,media_filtro2_val)<0)
     {
      Alert("Error copying Min Moving Average indicator buffer - error:",GetLastError());
      return;
     }
     
        if(CopyBuffer(media_filtro3_handle,0,0,3,media_filtro3_val)<0)
     {
      Alert("Error copying Min Moving Average indicator buffer - error:",GetLastError());
      return;
     }
     
   
    // LOGICA PARA ATIVAR COMPRA 
    
    bool compra_m_filtro = ((TimeToString(TimeCurrent(),TIME_MINUTES)<= hora_limite_opera ) && (ifr_Buffer[0] <= ifr_sobrevenda) && (Comprar == false) && (encerrarcompras == false) &&  ( encerrarcompras_fimdia == false ));
                              
    
    // LÓGICA PARA ATIVAR VENDA
 
    bool venda_mm_cros = ((tick.ask >= ma_max_Val[0]) && (Comprar == true) && (TimeToString(TimeCurrent(),TIME_MINUTES)<= hora_limite_opera )); 
    
    bool temosNovaVela = TemosNovaVela();
    
    // logica venda stop tempo 
    
    bool venda_stop_tempo = ((encerrar_finaldodia == 1) && (TimeToString(TimeCurrent(),TIME_MINUTES) > hora_limite_encerra));
  
     // compra no fechamento sem media e com media para realizar 
if ( operar_no_fechamento == 1)
{


if (operacoes_daytrade == 0 ) 
{
    if((TimeToString(TimeCurrent(),TIME_MINUTES)>= hora_limite_abre_op ) && (media_filtro_media == 0) && (compra_m_filtro == true) && (Comprar == false) && ( venda_stop_tempo == false ) )
      {
       Comment("temos uma compra");
          desenhaLinhaVertical("Compra",rates[0].time,clrBlue);
          CompraAMercado();    
      }
      
      //compra com media rapida e lenta como filtro e media principal como filtro 
      
        if((TimeToString(TimeCurrent(),TIME_MINUTES)>= hora_limite_abre_op ) && (media_filtro_media == 1) && (compra_m_filtro == true) && (Comprar == false) && ( venda_stop_tempo == false ) && (media_filtro2_val[0] > media_filtro3_val[0]) )
      {
       Comment("temos uma compra com medias");
          desenhaLinhaVertical("Compra",rates[0].time,clrBlue);
          CompraAMercado();    
      }
      }
      
      if (operacoes_daytrade == 1 ) 
      {
      
          if((temosNovaVela == true ) && (TimeToString(TimeCurrent(),TIME_MINUTES)>= hora_limite_abre_op ) && (media_filtro_media == 0) && (compra_m_filtro == true) && (Comprar == false) && ( venda_stop_tempo == false ) )
      {
       Comment("temos uma compra");
          desenhaLinhaVertical("Compra",rates[0].time,clrBlue);
          CompraAMercado();    
      }
      
      //compra com media rapida e lenta como filtro e media principal como filtro 
      
        if((temosNovaVela == true) && (TimeToString(TimeCurrent(),TIME_MINUTES)>= hora_limite_abre_op ) && (media_filtro_media == 1) && (compra_m_filtro == true) && (Comprar == false) && ( venda_stop_tempo == false ) && (media_filtro2_val[0] > media_filtro3_val[0]) )
      {
       Comment("temos uma compra com medias");
          desenhaLinhaVertical("Compra",rates[0].time,clrBlue);
          CompraAMercado();    
      }
      }
      
      

      
      }
      // compra sem media e com media sem fechamento 
      if ( operar_no_fechamento == 0)
{

    if((media_filtro_media == 0) && (compra_m_filtro == true) && (Comprar == false) && ( venda_stop_tempo == false ) )
      {
       Comment("temos uma compra");
          desenhaLinhaVertical("Compra",rates[0].time,clrBlue);
          CompraAMercado();    
      }
      
      //compra com media rapida e lenta como filtro e media principal como filtro 
      
        if((media_filtro_media == 1) && (compra_m_filtro == true) && (Comprar == false) && ( venda_stop_tempo == false ) && (media_filtro2_val[0] > media_filtro3_val[0]) )
      {
       Comment("temos uma compra com medias");
          desenhaLinhaVertical("Compra",rates[0].time,clrBlue);
          CompraAMercado();    
      }
      
      }
      
      //venda normal da operacao na madia da maxima 
      

       if((venda_mm_cros == true) && ( Comprar == true) )
         {
           Comment("temos uma venda");
          desenhaLinhaVertical("Venda",rates[0].time,clrRed);
          VendaAMercado();
         } 
          
          //venda no tempo 
          
           if ((venda_stop_tempo == true) && (encerrar_finaldodia == 1) && ( Comprar == true) )
         {
          Comment("temos uma venda stop tempo daytrade");
          desenhaLinhaVertical("Venda",rates[0].time,clrRed);
          FechaCompra();
          }
         
   
   if (operacoes_daytrade == 1)

   {
            
      if(TimeToString(TimeCurrent(),TIME_MINUTES) >= hora_limite_fecha_op && (i<2) )
        {
        
        Print("-----> Fim do Tempo Operacional");
        i = i+1;
         
              encerrarcompras = true;
                      
                         }
                
                           if (TimeToString(TimeCurrent(),TIME_MINUTES) < hora_limite_fecha_op )
                      {
                     encerrarcompras = false;
                     i = 1;
                      }
                }
                
                
                
                
   if (encerrar_finaldodia == 1)

   {
            
      if(TimeToString(TimeCurrent(),TIME_MINUTES) > hora_limite_encerra && (i2<2) )
        {
        
        Print("-----> Fim do Tempo Operacional encerrando operações ");
        i2 = i2+1;
         
              encerrarcompras_fimdia = true;
                      
                         }
                
                           if (TimeToString(TimeCurrent(),TIME_MINUTES) < hora_limite_encerra )
                      {
                     encerrarcompras_fimdia = false;
                     i2 = 1;
                      }
                }
                
                
             }
//+------------------------------------------------------------------+
//+------------------------------------------------------------------+
//| FUNÇÕES PARA AUXILIAR NA VISUALIZAÇÃO DA ESTRATÉGIA              |
//+------------------------------------------------------------------+

void desenhaLinhaVertical(string nome, datetime dt, color cor = clrAliceBlue)
   {
      ObjectDelete(0,nome);
      ObjectCreate(0,nome,OBJ_ARROW_THUMB_UP,0,dt,0);
      ObjectSetInteger(0,nome,OBJPROP_COLOR,cor);
   } 
   
//+------------------------------------------------------------------+
//| FUNÇÕES PARA ENVIO DE ORDENS                                     |
//+------------------------------------------------------------------+


// COMPRA A MERCADO
void CompraAMercado() // bser na documentação ordem das variaveis!!!
  {
   MqlTradeRequest   requisicao;    // requisição
   MqlTradeResult    resposta;      // resposta
   
   ZeroMemory(requisicao);
   ZeroMemory(resposta);
   
   //--- Cacacterísticas da ordem de Compra
   requisicao.action       = TRADE_ACTION_DEAL;                            // Executa ordem a mercado
   requisicao.magic        = magic_number;                                 // Nº mágico da ordem
   requisicao.symbol       = _Symbol;                                      // Simbolo do ativo
   requisicao.volume       = num_lots;                                     // Nº de Lotes
   requisicao.price        = NormalizeDouble(tick.ask,_Digits);            // Preço para a compra
  // requisicao.sl           = NormalizeDouble(tick.ask - SL*_Point,_Digits);// Preço Stop Loss
  // requisicao.tp           = NormalizeDouble(tick.ask + TK*_Point,_Digits);// Alvo de Ganho - Take Profit
   requisicao.deviation    = 0;                                            // Desvio Permitido do preço
   requisicao.type         = ORDER_TYPE_BUY;                               // Tipo da Ordem
   requisicao.type_filling = ORDER_FILLING_FOK;                            // Tipo de Preenchimento da ordem
   
   //---
   
   OrderSend(requisicao,resposta);
   //---
   if(resposta.retcode == 10008 || resposta.retcode == 10009)
     {
      Print("Ordem de Compra executada com sucesso!");
      Comprar = true ;
     }
   else
     {
       Print("Erro ao enviar Ordem Compra. Erro = ", GetLastError());
       ResetLastError();
     }
  }

// VENDA A MERCADO
void VendaAMercado()
  {
   MqlTradeRequest   requisicao;    // requisição
   MqlTradeResult    resposta;      // resposta
   
   ZeroMemory(requisicao);
   ZeroMemory(resposta);
   
   //--- Cacacterísticas da ordem de Venda
   requisicao.action       = TRADE_ACTION_DEAL;                            // Executa ordem a mercado
   requisicao.magic        = magic_number;                                 // Nº mágico da ordem
   requisicao.symbol       = _Symbol;                                      // Simbolo do ativo
   requisicao.volume       = num_lots;                                     // Nº de Lotes
   requisicao.price        = NormalizeDouble(tick.bid,_Digits);            // Preço para Venda
  // requisicao.sl           = NormalizeDouble(tick.bid + SL*_Point,_Digits);// Preço Stop Loss
  // requisicao.tp           = NormalizeDouble(tick.bid - TK*_Point,_Digits);// Alvo de Ganho - Take Profit
   requisicao.deviation    = 0;                                            // Desvio Permitido do preço
   requisicao.type         = ORDER_TYPE_SELL;                              // Tipo da Ordem
   requisicao.type_filling = ORDER_FILLING_FOK;                            // Tipo deo Preenchimento da ordem
   //---
   OrderSend(requisicao,resposta);
           
   //---
     if(resposta.retcode == 10008 || resposta.retcode == 10009)
       {
        Print("Ordem de Venda executada com sucesso!");
          Comprar = false;
       }
     else
       {
        Print("Erro ao enviar Ordem Venda. Erro = ", GetLastError());
        ResetLastError();
       } 
 }

//---
void FechaCompra()
   {
      MqlTradeRequest   requisicao;    // requisição
      MqlTradeResult    resposta;      // resposta
      
      ZeroMemory(requisicao);
      ZeroMemory(resposta);
      
      //--- Cacacterísticas da ordem de Venda
   requisicao.action       = TRADE_ACTION_DEAL;                            // Executa ordem a mercado
   requisicao.magic        = magic_number;                                 // Nº mágico da ordem
   requisicao.symbol       = _Symbol;                                      // Simbolo do ativo
   requisicao.volume       = num_lots;                                     // Nº de Lotes
   requisicao.price        = NormalizeDouble(tick.bid,_Digits);            // Preço para Venda
  // requisicao.sl           = NormalizeDouble(tick.bid + SL*_Point,_Digits);// Preço Stop Loss
  // requisicao.tp           = NormalizeDouble(tick.bid - TK*_Point,_Digits);// Alvo de Ganho - Take Profit
   requisicao.deviation    = 0;                                            // Desvio Permitido do preço
   requisicao.type         = ORDER_TYPE_SELL;                              // Tipo da Ordem
   requisicao.type_filling = ORDER_FILLING_FOK;                            // Tipo deo Preenchimento da ordem
      
      //---
      OrderSend(requisicao,resposta);
              
      //---
        if(resposta.retcode == 10008 || resposta.retcode == 10009)
          {
           Print("Ordem de Venda executada com sucesso! stop");
             Comprar = false;
          }
        else
          {
           Print("Erro ao enviar Ordem Venda. Erro = ", GetLastError());
           ResetLastError();
          }
 
     }
//+------------------------------------------------------------------+
//| FUNÇÕES ÚTEIS                                                    |
//+------------------------------------------------------------------+
//--- Para Mudança de Candle
bool TemosNovaVela()
  {
//--- memoriza o tempo de abertura da ultima barra (vela) numa variável
   static datetime last_time=0;
//--- tempo atual
   datetime lastbar_time= (datetime) SeriesInfoInteger(_Symbol,mm_tempo_grafico,SERIES_LASTBAR_DATE);

//--- se for a primeira chamada da função:
   if(last_time==0)
     {
      //--- atribuir valor temporal e sair
      last_time=lastbar_time;
      return(false);
     }

//--- se o tempo estiver diferente:
   if(last_time!=lastbar_time)
     {
      //--- memorizar esse tempo e retornar true
      last_time=lastbar_time;
      return(true);
     }
//--- se passarmos desta linha, então a barra não é nova; retornar false
   return(false);
  }
