//+------------------------------------------------------------------+
//|                                            maximas e minimas.mq5 |
//|                                                  Copyright 2020. |
//|                                             https://www.mql5.com |
//+------------------------------------------------------------------+
#property copyright "felipe paris Copyright 2020."
#property link      "https://www.mql5.com"
#property version   "1.00"
//---
// Meus cursos - https://linktr.ee/rafaelfvcs

//enum ESTRATEGIA_ENTRADA
 // {
 //  APENAS_MM,  // Apenas Médias Móveis
 //  APENAS_IFR, // Apenas IFR
  // MM_E_IFR    // Médias mais IFR
 // };
//---
// Variáveis Input
//sinput string s0; //-----------Estratégia de Entrada-------------
//input ESTRATEGIA_ENTRADA   estrategia      = APENAS_MM;     // Estratégia de Entrada Trader

sinput string s1; //-----------Médias Móveis-------------//
input int MA_Period_max = 2;         //Periodo de média máxima
input int MA_Period_min = 2;         //Periodo de média mínima
input int MA_filter = 34;          //Periodo de média filtro   
input int deslocamento = 1; // deslocamento das medias maxima e minima 
input ENUM_TIMEFRAMES mm_tempo_grafico     = PERIOD_CURRENT;// Tempo Gráfico

//sinput string s2; //-----------IFR-------------
//input int ifr_periodo                      = 5;             // Período IFR
//input ENUM_TIMEFRAMES ifr_tempo_grafico    = PERIOD_CURRENT;// Tempo Gráfico  
//input ENUM_APPLIED_PRICE ifr_preco         = PRICE_CLOSE;   // Preço Aplicado

//input int ifr_sobrecompra                  = 70;            // Nível de Sobrecompra
//input int ifr_sobrevenda                   = 30;            // Nível de Sobrevenda

//sinput string s3; //---------------------------
input int num_lots                         = 1;           // Número de Lotes
//input double TK                            = 60;            // Take Profit
//input double SL                            = 30;            // Stop Loss

sinput string s4; //---------------------------
input int operacoes_daytrade = 1; // 1 para operacoes daytrade 0 para diario 
input string hora_limite_fecha_op          = "17:40";       // Horário Limite Fechar Posição 

//+------------------------------------------------------------------+
//|  Variáveis para os indicadores                                   |
//+------------------------------------------------------------------+

//--- IFR
//int ifr_Handle;           // Handle controlador para o IFR
//double ifr_Buffer[];      // Buffer para armazenamento dos dados do IFR

int MA_max_handle;                 // Handle para a média móvel máxima
int MA_min_handle;                 // Handle para a média móvel mínima
int MA_filter_handle;
double ma_min_Val[];               // Array dinâmico para conter a média móvel mínima
double ma_max_Val[];               // Array dinâmico para conter a média móvel mínima
double ma_filter_Val[];            // media para filtro 

  bool Comprar = false; // Pode comprar?
  bool encerrarcompras = false; 
//  bool Vender  = false; // Pode vender?


//+------------------------------------------------------------------+
//| Variáveis para as funçoes                                        |
//+------------------------------------------------------------------+

int magic_number = 123456;   // Nº mágico do robô

MqlRates velas[];            // Variável para armazenar velas
MqlTick tick;                // variável para armazenar ticks 


//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
  {

 //  ifr_Handle = iRSI(_Symbol,ifr_tempo_grafico,ifr_periodo,ifr_preco);
 

    
   //    Comment("Função OnInit iniciada");
   //--- Get the handle for Moving Average indicator
   MA_max_handle=iMA(_Symbol,mm_tempo_grafico,MA_Period_max,deslocamento,MODE_SMA,PRICE_HIGH);
   MA_min_handle=iMA(_Symbol,mm_tempo_grafico,MA_Period_min,deslocamento,MODE_SMA,PRICE_LOW);
   MA_filter_handle=iMA(_Symbol,mm_tempo_grafico,MA_filter,0,MODE_SMA,PRICE_CLOSE);
//--- What if handle returns Invalid Handle
   if(MA_max_handle < 0 || MA_min_handle < 0 || MA_filter_handle < 0)
     {
      Alert("Error Creating Handles for indicators - error: ",GetLastError(),"!!");
     }

   CopyRates(_Symbol,mm_tempo_grafico,0,4,velas);
   ArraySetAsSeries(velas,true);
   
   
   // Para adicionar no gráfico o indicador:
 //  ChartIndicatorAdd(0,0,mm_rapida_Handle); 
  // ChartIndicatorAdd(0,0,mm_lenta_Handle);
  // ChartIndicatorAdd(0,1,ifr_Handle);

    
   ChartIndicatorAdd(0,0,MA_max_handle);
   ChartIndicatorAdd(0,0,MA_min_handle);
   ChartIndicatorAdd(0,0,MA_filter_handle);
   //---
  
//---
   return(INIT_SUCCEEDED);
  }
//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
  
 //  Comment("Função OnDeinit iniciada");
//---
  // IndicatorRelease(mm_rapida_Handle);
 //  IndicatorRelease(mm_lenta_Handle);
  // IndicatorRelease(ifr_Handle);
       IndicatorRelease(MA_max_handle);
       IndicatorRelease(MA_min_handle);
       IndicatorRelease(MA_filter_handle);
  }
//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
  {
  
 // Comment("Função Ontick iniciada");
    
//---
    // Copiar um vetor de dados tamanho três para o vetor mm_Buffer
    CopyBuffer(MA_max_handle,0,0,3,ma_max_Val);
    CopyBuffer(MA_min_handle,0,0,3,ma_min_Val);
    CopyBuffer(MA_filter_handle,0,0,3,ma_filter_Val);
    
    //--- Alimentar Buffers das Velas com dados:
    CopyRates(_Symbol,mm_tempo_grafico,0,4,velas);
    ArraySetAsSeries(velas,true);
    
    // Ordenar o vetor de dados:
    ArraySetAsSeries(ma_max_Val,true);
    ArraySetAsSeries(ma_min_Val,true);
    ArraySetAsSeries(ma_filter_Val,true);
    //---
    
   ChartIndicatorAdd(0,0,MA_max_handle);
   ChartIndicatorAdd(0,0,MA_min_handle);
   ChartIndicatorAdd(0,0,MA_filter_handle);
   
  // int copied=CopyRates(_Symbol,mm_tempo_grafico,0,4,velas); // Copied all datas
   double pr0_close= velas[0].close;
   double pr1_close= velas[1].close; 

    
     //--- Get the last price quote using the MQL5 MqlTick Structure
   if(!SymbolInfoTick(_Symbol,tick))
     {
      Alert("Error getting the latest price quote - error:",GetLastError(),"!!");
      return;
     }
     
   //--- Get the details of the latest 3 bars
   if(CopyRates(_Symbol,mm_tempo_grafico,0,8,velas)<0)
     {
      Alert("Error copying rates/history data - error:",GetLastError(),"!!");
      return;
     }
     
     
   //--- Copy the new values of our indicators to buffers (arrays) using the handle
   
   if(CopyBuffer(MA_max_handle,0,0,3,ma_max_Val)<0)
     {
      Alert("Error copying Max Moving Average indicator buffer - error:",GetLastError());
      return;
     }
     
   if(CopyBuffer(MA_min_handle,0,0,3,ma_min_Val)<0)
     {
      Alert("Error copying Min Moving Average indicator buffer - error:",GetLastError());
     return;
     }
     
   if(CopyBuffer(MA_filter_handle,0,0,3,ma_filter_Val)<0)
     {
      Alert("Error copying Min Moving Average indicator buffer - error:",GetLastError());
      return;
     }
     
  //   bool impede_erro_maximas_minimas = (ma_min_Val[0]>ma_max_Val[0] );
   
    // LOGICA PARA ATIVAR COMPRA 
    bool compra_mm_cros = (tick.last < ma_min_Val[0]) && (tick.last > ma_filter_Val[0]) && Comprar == false && encerrarcompras == false && tick.last < ma_max_Val[0];
                                             
   // bool compra_ifr = ifr_Buffer[0] <= ifr_sobrevenda;
    
    // LÓGICA PARA ATIVAR VENDA
    bool venda_mm_cros = ((tick.bid >= ma_max_Val[0]) && Comprar == true); 
    
    bool venda_stop = ((pr1_close < ma_filter_Val[0]) && Comprar == true);
    
   // bool venda_ifr = ifr_Buffer[0] >= ifr_sobrecompra;
    //---

    if(compra_mm_cros == true )
      {
       Comment("temos uma compra");
       Comprar = compra_mm_cros;   
          desenhaLinhaVertical("Compra",velas[0].time,clrBlue);
          CompraAMercado();    
      }
      
    //  if (venda_mm_cros ==true)
   //   {
   //     Comment("temos uma venda");
   //     Vender = venda_mm_cros;
   //     }
   // else if(estrategia == APENAS_IFR)
    // {
    //    Comprar = compra_ifr;
    //    Vender  = venda_ifr;
    // }
    // retorna true se tivermos uma nova vela
  //  bool temosNovaVela = TemosNovaVela();
       // Condição de Venda:
       if(venda_mm_cros == true)
         {
           Comment("temos uma venda");
          desenhaLinhaVertical("Venda",velas[0].time,clrRed);
          VendaAMercado();
         } 
         
       //  if ( venda_stop == true ) 
        // {
       //    Comment("temos uma venda stop");
        //  desenhaLinhaVertical("Venda",velas[0].time,clrRed);
        // VendaAMercado();
        //  }
         
   //   }
   
   if (operacoes_daytrade == 1)
   {
  
      if(TimeToString(TimeCurrent(),TIME_MINUTES) == hora_limite_fecha_op )
        {
            Print("-----> Fim do Tempo Operacional: encerrar posições abertas!");
              encerrarcompras = true;
              
                  if(TimeToString(TimeCurrent(),TIME_MINUTES) == hora_limite_fecha_op  && PositionSelect(_Symbol)==true )
                     {
                   if(PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_BUY)
                     {
                      FechaCompra();
                  
                      }
                  // else if(PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_SELL)
                 //  {
                 //     FechaVenda();
                  // }
                      }
                      }
                      if (TimeToString(TimeCurrent(),TIME_MINUTES) < hora_limite_fecha_op )
                      {
                     encerrarcompras = false;
                      }
                }
  }
//+------------------------------------------------------------------+
//+------------------------------------------------------------------+
//| FUNÇÕES PARA AUXILIAR NA VISUALIZAÇÃO DA ESTRATÉGIA              |
//+------------------------------------------------------------------+

void desenhaLinhaVertical(string nome, datetime dt, color cor = clrAliceBlue)
   {
      ObjectDelete(0,nome);
      ObjectCreate(0,nome,OBJ_VLINE,0,dt,0);
      ObjectSetInteger(0,nome,OBJPROP_COLOR,cor);
   } 
   
//+------------------------------------------------------------------+
//| FUNÇÕES PARA ENVIO DE ORDENS                                     |
//+------------------------------------------------------------------+

// COMPRA A MERCADO
void CompraAMercado() // bser na documentação ordem das variaveis!!!
  {
   MqlTradeRequest   requisicao;    // requisição
   MqlTradeResult    resposta;      // resposta
   
   ZeroMemory(requisicao);
   ZeroMemory(resposta);
   
   //--- Cacacterísticas da ordem de Compra
   requisicao.action       = TRADE_ACTION_DEAL;                            // Executa ordem a mercado
   requisicao.magic        = magic_number;                                 // Nº mágico da ordem
   requisicao.symbol       = _Symbol;                                      // Simbolo do ativo
   requisicao.volume       = num_lots;                                     // Nº de Lotes
   requisicao.price        = NormalizeDouble(tick.ask,_Digits);            // Preço para a compra
  // requisicao.sl           = NormalizeDouble(tick.ask - SL*_Point,_Digits);// Preço Stop Loss
  // requisicao.tp           = NormalizeDouble(tick.ask + TK*_Point,_Digits);// Alvo de Ganho - Take Profit
   requisicao.deviation    = 0;                                            // Desvio Permitido do preço
   requisicao.type         = ORDER_TYPE_BUY;                               // Tipo da Ordem
   requisicao.type_filling = ORDER_FILLING_FOK;                            // Tipo de Preenchimento da ordem
   
   //---
   OrderSend(requisicao,resposta);
   //---
   if(resposta.retcode == 10008 || resposta.retcode == 10009)
     {
      Print("Ordem de Compra executada com sucesso!");
     }
   else
     {
       Print("Erro ao enviar Ordem Compra. Erro = ", GetLastError());
       ResetLastError();
     }
  }

// VENDA A MERCADO
void VendaAMercado()
  {
   MqlTradeRequest   requisicao;    // requisição
   MqlTradeResult    resposta;      // resposta
   
   ZeroMemory(requisicao);
   ZeroMemory(resposta);
   
   //--- Cacacterísticas da ordem de Venda
   requisicao.action       = TRADE_ACTION_DEAL;                            // Executa ordem a mercado
   requisicao.magic        = magic_number;                                 // Nº mágico da ordem
   requisicao.symbol       = _Symbol;                                      // Simbolo do ativo
   requisicao.volume       = num_lots;                                     // Nº de Lotes
   requisicao.price        = NormalizeDouble(tick.bid,_Digits);            // Preço para Venda
  // requisicao.sl           = NormalizeDouble(tick.bid + SL*_Point,_Digits);// Preço Stop Loss
  // requisicao.tp           = NormalizeDouble(tick.bid - TK*_Point,_Digits);// Alvo de Ganho - Take Profit
   requisicao.deviation    = 0;                                            // Desvio Permitido do preço
   requisicao.type         = ORDER_TYPE_SELL;                              // Tipo da Ordem
   requisicao.type_filling = ORDER_FILLING_FOK;                            // Tipo deo Preenchimento da ordem
   //---
   OrderSend(requisicao,resposta);
             Comprar = false;
   //---
     if(resposta.retcode == 10008 || resposta.retcode == 10009)
       {
        Print("Ordem de Venda executada com sucesso!");
       }
     else
       {
        Print("Erro ao enviar Ordem Venda. Erro = ", GetLastError());
        ResetLastError();
       } 
 }

//---
void FechaCompra()
   {
      MqlTradeRequest   requisicao;    // requisição
      MqlTradeResult    resposta;      // resposta
      
      ZeroMemory(requisicao);
      ZeroMemory(resposta);
      
      //--- Cacacterísticas da ordem de Venda
      requisicao.action       = TRADE_ACTION_DEAL;
      requisicao.magic        = magic_number;
      requisicao.symbol       = _Symbol;
      requisicao.volume       = num_lots; 
      requisicao.price        = 0; 
      requisicao.type         = ORDER_TYPE_SELL;
      requisicao.type_filling = ORDER_FILLING_RETURN;
      
      //---
      OrderSend(requisicao,resposta);
                Comprar = false;
      //---
        if(resposta.retcode == 10008 || resposta.retcode == 10009)
          {
           Print("Ordem de Venda executada com sucesso!");
          }
        else
          {
           Print("Erro ao enviar Ordem Venda. Erro = ", GetLastError());
           ResetLastError();
          }
   }

//void FechaVenda()
  // {   
   //   MqlTradeRequest   requisicao;    // requisição
   //   MqlTradeResult    resposta;      // resposta
      
   //   ZeroMemory(requisicao);
   //   ZeroMemory(resposta);
      
      //--- Cacacterísticas da ordem de Compra
   //   requisicao.action       = TRADE_ACTION_DEAL;
   //   requisicao.magic        = magic_number;
    //  requisicao.symbol       = _Symbol;
    //  requisicao.volume       = num_lots; 
    //  requisicao.price        = 0; 
   //   requisicao.type         = ORDER_TYPE_BUY;
   //   requisicao.type_filling = ORDER_FILLING_RETURN;
      
      //---
   //   OrderSend(requisicao,resposta);
   
      //---
   //     if(resposta.retcode == 10008 || resposta.retcode == 10009)
    //      {
    //       Print("Ordem de Compra executada com sucesso!");
    //      }
    //    else
    //      {
     //      Print("Erro ao enviar Ordem Compra. Erro = ", GetLastError());
     //      ResetLastError();
     //     }
  // }
